{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["ItemTypes","Quarter","children","moveStar","x","y","useDrop","accept","drop","position","flexValues","upperLeft","alignItems","justifyContent","upperRight","lowerLeft","lowerRight","style","height","width","display","ref","Star","indexNumber","useDrag","item","type","collect","monitor","isDragging","drag","fontSize","opacity","cursor","role","aria-label","renderQuarter","i","starPosition","setStarPosition","toX","toY","Math","floor","isStarHere","grey","piece","background","onClick","key","generatePreview","itemType","className","Layout","useState","console","log","quarters","push","DndProvider","backend","TouchBackend","options","enableMouseEvents","generator","flexWrap","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.470f0dc6.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport './App.css';\nimport { DndProvider, useDrag, useDrop } from 'react-dnd';\n// import TouchBackend from 'react-dnd-html5-backend';\nimport TouchBackend from 'react-dnd-touch-backend';\nimport Preview from 'react-dnd-preview';\n\nconst ItemTypes = {\n  STAR: 'star'\n};\n\nfunction Quarter({ children, moveStar, x, y }) {\n  const [, drop] = useDrop({\n    accept: ItemTypes.STAR,\n    drop: () => moveStar(x, y)\n  });\n\n  const position =\n    x === 0 && y === 0\n      ? 'upperLeft'\n      : x === 1 && y === 0\n      ? 'upperRight'\n      : x === 0 && y === 1\n      ? 'lowerLeft'\n      : x === 1 && x === 1\n      ? 'lowerRight'\n      : null;\n\n  const flexValues = {\n    upperLeft: {\n      alignItems: 'flex-start',\n      justifyContent: 'flex-start'\n    },\n    upperRight: {\n      alignItems: 'flex-start',\n      justifyContent: 'flex-end'\n    },\n    lowerLeft: {\n      alignItems: 'flex-end',\n      justifyContent: 'flex-start'\n    },\n    lowerRight: {\n      alignItems: 'flex-end',\n      justifyContent: 'flex-end'\n    }\n  };\n\n  const style = {\n    height: '100%',\n    width: '100%',\n    display: 'flex',\n    alignItems: flexValues[position].alignItems,\n    justifyContent: flexValues[position].justifyContent\n  };\n\n  return (\n    <div style={style} ref={drop}>\n      {children}\n    </div>\n  );\n}\n\nfunction Star({ indexNumber }) {\n  const [{ isDragging }, drag] = useDrag({\n    item: { type: ItemTypes.STAR },\n    collect: monitor => ({\n      isDragging: !!monitor.isDragging()\n    })\n  });\n  return (\n    <span\n      style={{\n        fontSize: '6em',\n        opacity: isDragging ? 0.5 : 1,\n        cursor: 'move'\n      }}\n      role=\"img\"\n      aria-label=\"star\"\n      ref={drag}\n    >\n      ðŸ’©\n    </span>\n  );\n}\n\nfunction renderQuarter(i, starPosition, setStarPosition) {\n  function moveStar(toX, toY) {\n    setStarPosition([toX, toY]);\n  }\n\n  const x = i % 2;\n  const y = Math.floor(i / 2);\n  const isStarHere = x === starPosition[0] && y === starPosition[1];\n  const grey = (x + y) % 2 === 1;\n  const piece = isStarHere ? <Star indexNumber={i} /> : null;\n\n  return (\n    <div\n      style={{\n        height: '50%',\n        width: '50%',\n        background: grey ? 'grey' : 'white'\n      }}\n      onClick={() => moveStar(x, y)}\n      key={i}\n    >\n      <Quarter x={x} y={y} moveStar={moveStar}>\n        {piece}\n      </Quarter>\n    </div>\n  );\n}\n\nconst generatePreview = ({ itemType, item, style }) => {\n  return (\n    <div className=\"item-list__item\" style={style}>\n      <Star />\n    </div>\n  );\n};\n\nfunction Layout() {\n  const [starPosition, setStarPosition] = useState([0, 0]);\n  console.log('starPosition:', starPosition);\n\n  const quarters = [];\n  for (let i = 0; i < 4; i++) {\n    quarters.push(renderQuarter(i, starPosition, setStarPosition));\n  }\n\n  const opts = {\n    enableMouseEvents: false\n  };\n\n  return (\n    <DndProvider backend={TouchBackend} options={opts}>\n      <Preview generator={generatePreview} />\n      <div\n        style={{\n          width: '100vw',\n          height: '100vh',\n          display: 'flex',\n          flexWrap: 'wrap'\n        }}\n      >\n        {quarters}\n      </div>\n    </DndProvider>\n  );\n}\n\nfunction App() {\n  return <Layout />;\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}